#Requires -PSEdition Core
Function Export-PowerBIWorkspacesSecurity {
  #Requires -Modules MicrosoftPowerBIMgmt, ImportExcel
  try {
    Get-PowerBIAccessToken | Out-Null
  } catch {
    Write-Host 'üîí Power BI Access Token required. Launching Azure Active Directory authentication dialog...'
    Start-Sleep -s 1
    Connect-PowerBIServiceAccount -WarningAction SilentlyContinue | Out-Null
  }
  finally {
    Write-Host 'üîë Power BI Access Token acquired.'
    $currentDate = Get-Date -UFormat "%Y-%m-%d_%H%M"
    $OutputFileName = "Power BI Workspace Security Audit ($currentDate).xlsx"
    # Get names of Workspaces to ignore from IgnoreList.json file
    # Most of these are template apps and/or auto-generated by Microsoft
    [PSCustomObject]$ignoreObjects = Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath "../IgnoreList.json") | ConvertFrom-Json
    [array]$ignoreWorkspaces = $ignoreObjects.IgnoreWorkspaces
    $workspaces = Get-PowerBIWorkspace -Scope Organization -All |
      Where-Object {
        $_.State -NE "Deleted" -AND 
        $_.Type -EQ "Workspace" -AND 
        $_.IsOrphaned -EQ $False -AND 
        $_.Name -NotIn $ignoreWorkspaces -AND
        $_.Name -NotLike ".*"
      } | Select-Object -Property Id, Name |
      Sort-Object -Property Name -Unique
    $result = @()
    ForEach($w in $workspaces) {
      $workspaceName = $w.Name
      $workspaceId = $w.Id
      "Getting results for workspace: `e[38;2;255;0;0m$workspaceName`e[0m (Id: `e[38;2;0;255;0m$workspaceId`e[0m)" |
        Write-Host
      $pbiURL = "https://api.powerbi.com/v1.0/myorg/groups/$workspaceId/users"
      $resultJson = Invoke-PowerBIRestMethod -Url $pbiURL -Method GET -ErrorAction SilentlyContinue
      $resultObject = ConvertFrom-Json -InputObject $resultJson 
      $result += $resultObject.Value |
        Select-Object @{n='workspaceId';e={$workspaceId}},
        @{n='workspaceName';e={$workspaceName}},
        @{n='userName';e={$_.displayName}},
        @{n='userRole';e={$_.groupUserAccessRight}},
        @{n='userType';e={$_.principalType}},
        @{n='emailAddress';e={$_.emailAddress}},
        @{n='identifier';e={$_.identifier}} |
        Sort-Object userRole, userName
      # Write-Host "Waiting 36 seconds to avoid hitting the API limit (200 req/hr)..."
      # Start-Sleep 36
    }
    $params = @{
      Path = Join-Path -Path $env:TEMP -ChildPath $OutputFileName
      Show = $true
      ClearSheet = $true
      AutoFilter = $true
      AutoSize = $true
      FreezeTopRow = $true
      BoldTopRow = $true
    }
    $result | 
      Select-Object -Property workspaceId, workspaceName, emailAddress, userRole, userType |
      Sort-Object -Property workspaceName, userRole, emailAddress | Export-Excel @params 
  }
}
Function Get-DataGatewayNodesStatus {
  <#
  .SYNOPSIS
    Function: Get-DataGatewayNodesStatus
    Author: @JamesDBartlett3@techhub.social (James D. Bartlett III)
  .DESCRIPTION
    This function will retrieve the status of all nodes in 
    all Data Gateway clusters to which you have access.
  .EXAMPLE
    Get-DataGatewayNodesStatus
  .NOTES
    This function does NOT require Azure AD app registration, 
    service principal creation, or any other special setup.
    The only requirements are:
    - The user must be able to run PowerShell (and install the
      DataGateway module, if it's not already installed).
    - The user must have permissions to query the Data Gateway
      service.
    TODO
      - Replace DataGateway module dependency with 
        Invoke-RestMethod calls to the GatewayClusters API.
        https://api.powerbi.com/v2.0/myorg/gatewayclusters
#>
  #Requires -Modules DataGateway
  Write-Host '‚è≥ Retrieving status of all accesssible Data Gateway nodes...'
  try {
    Get-DataGatewayAccessToken | Out-Null
  } catch {
    Write-Host 'üîí DataGatewayAccessToken required. Launching Azure Active Directory authentication dialog...'
    Start-Sleep -s 1
    Login-DataGatewayServiceAccount -WarningAction SilentlyContinue | Out-Null
  } finally {
    Write-Host 'üîë Power BI Access Token acquired.'
    Get-DataGatewayCluster | ForEach-Object {
      $clusterName = $_.Name
      $clusterId = $_.Id
      $_ | Select-Object -ExpandProperty MemberGateways | Select-Object -Property `
      @{l = 'ClusterId'; e = { $clusterId }}, 
      @{l = 'ClusterName'; e = { $clusterName }}, 
      @{l = 'NodeId'; e = { $_.Id }}, 
      @{l = 'NodeName'; e = { $_.Name }}, 
      @{l = 'GatewayMachine'; e = { ($_.Annotation | ConvertFrom-Json).gatewayMachine }}, 
      Status, Version, VersionStatus, State
    }
  }
}
