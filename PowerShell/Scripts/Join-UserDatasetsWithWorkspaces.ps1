<#
  .SYNOPSIS
    Function: Join-UserDatasetsWithWorkspaces
    Author: @JamesDBartlett3@techhub.social (James D. Bartlett III)

  .DESCRIPTION
    - Audit the security settings of Power BI Workspaces

  .PARAMETER DatasetList
    - list of dataset IDs -- set to output from Get-UserDatasets

  .OUTPUTS
    - Table with two columns: DatasetId and WorkspaceId

  .EXAMPLE
    Join-UserDatasetsWithWorkspaces $DatasetList

  .NOTES
    This function does NOT require Azure AD app registration, 
    service principal creation, or any other special setup.
    The only requirements are:
      - The user must be able to run PowerShell (and install the
        MicrosoftPowerBIMgmt module, if it's not already installed).
      - The user must have permissions to access the workspace(s)
        in the Power BI service.

    TODO
      - Add process block to enable pipeline input
      - Re-implement token logic
  #>
#Requires -PSEdition Core
#Requires -Modules MicrosoftPowerBIMgmt
Param(
  [parameter(Mandatory = $true, ValueFromPipeline = $true)]$DatasetList
)

# Get names of Workspaces to ignore from IgnoreList.json file
# Most of these are template apps and/or auto-generated by Microsoft
[PSCustomObject]$ignoreObjects = Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath "../IgnoreList.json") | ConvertFrom-Json
[array]$ignoreWorkspaces = $ignoreObjects.IgnoreWorkspaces

$obj = @{}
try {
  Get-PowerBIAccessToken | Out-Null
} catch {
  Write-Host 'ðŸ”’ Power BI Access Token required. Launching Azure Active Directory authentication dialog...'
  Start-Sleep -s 1
  Connect-PowerBIServiceAccount -WarningAction SilentlyContinue | Out-Null
} finally {
  Write-Host 'ðŸ”‘ Power BI Access Token acquired.'
  $workspaces = Get-PowerBIWorkspace -Scope Organization -All |
  Where-Object { $_.Type -EQ "Workspace" -AND $_.Name -NotIn $ignoreWorkspaces } |
  Select-Object Id
  $datasets = $null
  ForEach ($w in $workspaces) {
    $workspaceId = $w.Id
    $datasets = Get-PowerBIDataset -WorkspaceId $workspaceId -ErrorAction "SilentlyContinue" |
    Select-Object -Property Id |
    Where-Object -Property Id -In $DatasetList.Id
    ForEach ($d in $datasets) {
      $obj.Add($d.Id, $workspaceId)
    }
  }
}
return $obj